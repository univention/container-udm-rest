---
# Default values for udm-rest-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
securityContext: {}
tolerations: []


# -- Application configuration of the UDM REST API
udmRestApi:
  # -- Domain name of the instance.
  # Example: `example.org`
  domainname: null
  # -- Host name of the instance.
  # Example: `souvap`
  hostname: null
  # -- Hostname of the LDAP server.
  # Example: `"ucs-1234.univention.intranet"`
  ldapHost: null
  # -- IP address of the LDAP server.
  # (This is necessary to allow resolving the LDAP fqdn and pass the certificate checks.)
  # Example: `"10.200.0.1"`
  ldapHostIp: null
  # -- Port to connect to the LDAP server.
  ldapPort: "389"
  # -- Base DN of the LDAP directory.
  # Example: `"dc=example,dc=org"`
  ldapBaseDn: null
  # -- DN of the UMC instance.
  # Example: `"cn=ucs-1234,cn=dc,cn=computers,dc=example,dc=org"`
  ldapHostDn: null
  # -- Debug level of the UDM REST API server.
  # (1 = errors only, 99 = most verbose)
  debugLevel: "5"
  # -- Authorized groups with special rights.
  authGroups:
    # -- Set directory.manager.rest.authorized-groups.dc-backup
    # Example: `"cn=DC Backup Hosts,cn=groups,dc=example,dc=com"`
    dcBackup: null
    # -- Set directory.manager.rest.authorized-groups.dc-slaves
    # Example: `"cn=DC Slave Hosts,cn=groups,dc=example,dc=com"`
    dcSlaves: null
    # -- Set directory.manager.rest.authorized-groups.domain-admins
    # Example: `"cn=Domain Admins,cn=groups,dc=example,dc=com"`
    domainAdmins: null

  # -- Path to file with the LDAP secret.
  ldapSecretFile: "/var/secrets/ldap_secret"
  # -- Path to file with the LDAP machine secret.
  machineSecretFile: "/var/secrets/machine_secret"
  # -- Path to file with the CA certificate.
  caCertFile: "/var/secrets/ca_cert"


# -- Kubernetes ingress
ingress:
  # -- Set this to `true` in order to enable the installation on Ingress related objects.
  enabled: false
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
    nginx.ingress.kubernetes.io/use-regex: "true"
  # -- The hostname. This parameter has to be supplied. Example `udm.example.com`.
  # host: "sso.example.com"
  paths:
    - pathType: "Prefix"
      path: "/univention(/udm/.*)"
  tls:
    enabled: true
    secretName: ""


## Istio support
istio:
  # -- Set this to `true` in order to enable the installation on Istio related objects.
  enabled: true
  # -- The hostname. This parameter has to be supplied. Example `udm.example`.
  # host: "sso.example.com"
  virtualService:
    enabled: true
    annotations: {}
    pathOverrides: []
    paths:
      - match: "prefix"
        path: "/univention/udm/"
        rewrite: "/udm/"
  gateway:
    enabled: false
    annotations:
    selectorIstio: "ingressgateway"
    externalGatewayName: "swp-istio-gateway"
    tls:
      enabled: true
      httpsRedirect: true
      secretName: ""


## Docker image
image:
  registry: "registry.souvap-univention.de"
  repository: "souvap/tooling/images/udm-rest-api/udm-rest-api"
  tag: "0.1.0"
  imagePullPolicy: "Always"

  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 15
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 9979
      port: 80
      protocol: "TCP"

  sessionAffinity:
    enabled: false
    timeoutSeconds: 10800

...
